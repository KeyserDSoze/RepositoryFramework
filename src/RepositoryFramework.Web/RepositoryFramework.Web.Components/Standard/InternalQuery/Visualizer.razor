@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using System.Collections;
@using System.Text.Json;
@using System.Linq.Dynamic.Core;
@typeparam T where T: IEnumerable

@if (Entity != null)
{
    <RadzenAccordion class="overflow-scroll">
        <Items>
            <RadzenAccordionItem class="p-0" Text="@($"{_counter} items!")" Icon="account_balance_wallet">
                <table class="table-striped">
                    <tbody>
                        @foreach (var item in Entity)
                        {
                            var type = item.GetType();
                            <tr>
                                @if (type.IsPrimitive())
                                {
                                    <td>
                                        @item.ToString()
                                    </td>
                                }
                                else
                                {
                                    foreach (var innerItem in type.FetchProperties())
                                    {
                                        if (innerItem.PropertyType.IsPrimitive())
                                        {
                                            <td>
                                                @innerItem.GetValue(item)
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                @innerItem.GetValue(item).ToJson()
                                            </td>
                                        }
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion>
}

@code {
    [Parameter]
    public T? Entity { get; set; }
    private bool _isVisible;
    private int _counter;
    protected override Task OnParametersSetAsync()
    {
        if (Entity != null)
        {
            if (Entity is IList listable)
                _counter = listable.Count;
            else if (Entity is IEnumerable enumerable)
                _counter = enumerable.AsQueryable().Count();
        }
        return base.OnParametersSetAsync();
    }
}