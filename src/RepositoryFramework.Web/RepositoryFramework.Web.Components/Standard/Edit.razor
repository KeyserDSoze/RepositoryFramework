@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@typeparam T
@typeparam TKey where TKey: notnull
@inherits RepositoryBase<T, TKey>

@if (_entity != null)
{
    <div class="row">
        <div class="col">
            <RadzenFieldset Text="@Constant.Key">
                @if (!typeof(TKey).IsPrimitive())
                {
                    <InternalEdit Entity="_key" DisableEdit="!_isNew"></InternalEdit>
                }
                else
                {
                    <InternalPrimitiveEdit Name="@Constant.Key" Value="@_key" T="TKey" Update="x => _key = (TKey)x" DisableEdit="!_isNew"></InternalPrimitiveEdit>
                }
                @if (!_isRequestedToCreateNew)
                {
                    <RadzenSwitch Value="@_isNew" ValueChanged="@ChangeKeyEditingStatus" />
                }
                @if (_isNew && !_isRequestedToCreateNew)
                {
                    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Warning" Size="AlertSize.Medium" Shade="Shade.Darker" AllowClose=false>
                        Warning!! Active it only if you want to copy an item.
                        If you active the key editing, and you change it, on save you will create a copy of this element with your new key.
                    </RadzenAlert>
                }
            </RadzenFieldset>
            <RadzenFieldset Text="@typeof(T).Name">
                <CascadingValue Name="@Constant.BaseEntity" Value="_entity">
                    <CascadingValue Name="@Constant.EntityRetrieverByKey" Value="@ValueRetrieverByKey">
                        <CascadingValue Name="@Constant.RestorableValues" Value="@_restorableValues">
                            <InternalEdit Entity="_entity" DisableEdit="DisableEdit" PropertiesUiSettings="_propertiesRetrieved" Deep="1"></InternalEdit>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </RadzenFieldset>
            @if (!DisableEdit || AllowDelete)
            {
                <RadzenFieldset Text="@Constant.Edit">
                    @if (!DisableEdit)
                    {
                        <RadzenButton Click=@(args => SaveAsync(false)) Icon="assignment_turned_in" ButtonStyle="ButtonStyle.Secondary" />
                        <RadzenButton Click=@(args => SaveAsync(true)) Icon="note_add" ButtonStyle="ButtonStyle.Primary" />
                    }
                    @if (AllowDelete)
                    {
                        <RadzenButton class="float-end" Click=@(args => CheckIfYouWantToDeleteAsync()) Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                    }
                </RadzenFieldset>
            }
        </div>
    </div>
}