@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@using System.Linq.Dynamic.Core;
@typeparam T where T: IEnumerable

@if (Entity != null)
{
    <div>
        <Accordion>
            <Collapse Visible="_isVisible">
                <CollapseHeader>
                    <Heading Size="HeadingSize.Is5">
                        <Button Clicked="@(()=>_isVisible = !_isVisible)">
                            @_counter items!
                        </Button>
                    </Heading>
                </CollapseHeader>
                <CollapseBody>
                    <Table Striped="true">
                        <TableBody>
                            @foreach (var item in Entity)
                            {
                                var type = item.GetType();
                                <TableRow>
                                    @if (type.IsPrimitive())
                                    {
                                        <TableRowCell>
                                            @item.ToString()
                                        </TableRowCell>
                                    }
                                    else
                                    {
                                        foreach (var innerItem in type.FetchProperties())
                                        {
                                            if (innerItem.PropertyType.IsPrimitive())
                                            {
                                                <TableRowCell>
                                                    @innerItem.GetValue(item)
                                                </TableRowCell>
                                            }
                                            else
                                            {
                                                <TableRowCell>
                                                    @innerItem.GetValue(item).ToJson()
                                                </TableRowCell>
                                            }
                                        }
                                    }
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CollapseBody>
            </Collapse>
        </Accordion>
    </div>
}

@code {
    [Parameter]
    public T? Entity { get; set; }
    private bool _isVisible;
    private int _counter;
    protected override Task OnParametersSetAsync()
    {
        if (Entity != null)
        {
            if (Entity is IList listable)
                _counter = listable.Count;
            else if (Entity is IEnumerable enumerable)
                _counter = enumerable.AsQueryable().Count();
        }
        return base.OnParametersSetAsync();
    }
}