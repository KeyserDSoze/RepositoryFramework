@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@typeparam T

@if (Entity != null)
{
    <Row>
        <Column>
            @for (int i = 0; i < s_primitives.Count; i += 2)
            {
                var value = s_primitives[i];
                var nextValue = i + 1 < s_primitives.Count ? s_primitives[i + 1] : null;

                <Fields>
                    <Field ColumnSize="ColumnSize.IsHalf">
                        <FieldLabel>@value.Label</FieldLabel>
                        <FieldBody>
                            <TextEdit Text="@value.Value(Entity)?.ToString()" TextChanged="x => OnChange(x, value)">
                            </TextEdit>
                        </FieldBody>
                    </Field>
                    @if (nextValue != null)
                    {
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <FieldLabel>@value.Label</FieldLabel>
                            <FieldBody>
                                <TextEdit Text="@nextValue.Value(Entity)?.ToString()" TextChanged="x => OnChange(x, nextValue)">
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    }
                </Fields>
            }
            @foreach (var complex in s_complexes)
            {
                <Divider DividerType="DividerType.TextContent" Text="@complex.Label" />
                @if (complex.PropertyInfo.PropertyType.GetInterface(nameof(IEnumerable)) == null)
                {
                    @LoadNext(complex)
                }
            }
        </Column>
    </Row>
}