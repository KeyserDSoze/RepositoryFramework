@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@typeparam T

@if (Entity != null)
{
    <Row>
        <Column>
            @for (int i = 0; i < PropertyTree.Primitives.Count; i += 2)
            {
                var value = PropertyTree.Primitives[i];
                var nextValue = i + 1 < PropertyTree.Primitives.Count ? PropertyTree.Primitives[i + 1] : null;

                <Fields>
                    <InternalSingleEdit PropertyInfoKeeper="value" Context="Entity"></InternalSingleEdit>
                    @if (nextValue != null)
                    {
                        <InternalSingleEdit PropertyInfoKeeper="nextValue" Context="Entity"></InternalSingleEdit>
                    }
                </Fields>
            }
            @foreach (var complex in PropertyTree.Complexes)
            {
                <Divider DividerType="DividerType.TextContent" Text="@complex.PropertyInfo.Name" />
                @if (complex.PropertyInfo.PropertyInfo.PropertyType.GetInterface(nameof(IEnumerable)) == null)
                {
                    @LoadNext(complex.PropertyInfo)
                }
            }
        </Column>
    </Row>
}