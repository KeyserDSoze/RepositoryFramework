@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@typeparam T

@if (Entity != null)
{
    @if (AppSettings.Palette != AppPalette.Normal)
    {
        <style>
            hr.divider.divider-text::before {
                color: @_backgroundColor;
                font-size: 1.6em;
            }
        </style>
    }
    <div style="padding-top:15px;">
        <Row>
            <Column>
                @while (Enumerator.MoveNext())
                {
                    var value = Enumerator.Current;
                    if (value.Type == PropertyType.Primitive)
                    {
                        if (Enumerator.MoveNext())
                        {
                            var nextValue = Enumerator.Current;
                            if (nextValue.Type == PropertyType.Primitive)
                            {
                                <Fields>
                                    <InternalPrimitiveEdit Name="@value.Self.Name" Value="@value.Value(Entity)" Updatable="@(x => value.Set(Entity, x))" DisableEdit="DisableEdit"></InternalPrimitiveEdit>
                                    <InternalPrimitiveEdit Name="@nextValue.Self.Name" Value="@nextValue.Value(Entity)" Updatable="@(x => nextValue.Set(Entity, x))" DisableEdit="DisableEdit"></InternalPrimitiveEdit>
                                </Fields>
                            }
                            else
                            {
                                <Fields>
                                    <InternalPrimitiveEdit Name="@value.Self.Name" Value="@value.Value(Entity)" Updatable="@(x => value.Set(Entity, x))" DisableEdit="DisableEdit"></InternalPrimitiveEdit>
                                </Fields>
                                <Divider DividerType="DividerType.TextContent" Text="@value.Self.Name" />
                                @LoadNext(value)
                            }
                        }
                        else
                        {
                            <Fields>
                                <InternalPrimitiveEdit Name="@value.Self.Name" Value="@value.Value(Entity)" Updatable="@(x => value.Set(Entity, x))" DisableEdit="DisableEdit"></InternalPrimitiveEdit>
                            </Fields>
                            break;
                        }
                    }
                    else
                    {
                        <Divider DividerType="DividerType.TextContent" Text="@value.Self.Name" />
                        @LoadNext(value)
                    }
                }
            </Column>
        </Row>
    </div>
}