@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using System.Collections;
@using System.Text.Json;
@using System.Linq.Expressions;
@typeparam T

<div class="col-12 my-2">
    <div class="input-group">
        <span class="input-group-text">
            @Name
        </span>
        @if (PropertyUiSettings.HasValues())
        {
            <RadzenDropDown TValue="IEnumerable<string>"
                        AllowClear="true"
                        AllowFiltering="true"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Multiple="true"
                        Placeholder="Select..."
                        Data="@PropertyUiSettings!.Values"
                        TextProperty="Label"
                        ValueProperty="Id"
                        Value="@Values?.Select(x => PropertyUiSettings.LabelComparer(x))"
                        Change="@InternalUpdate"
                        Disabled="@DisableEdit"
                        class="form-control" />
        }
        @if (PropertyUiSettings?.HasDefault == true && !DisableEdit)
        {
            <span class="input-group-text">
                @if (RestorableValues == null)
                {
                    <RadzenButton Icon="star" Click="@((x) => SetDefaultAsync())" />
                }
                else
                {
                    <RadzenButton Icon="arrow_back" Click="@((x) => Restore())" />
                }
            </span>
        }
    </div>
</div>
<ErrorCatcher Error="@Error" />

@code {
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public IEnumerable<T>? Values { get; set; }
    [Parameter]
    public Action<object> Update { get; set; }
    [Parameter]
    public bool DisableEdit { get; set; }
    [Parameter]
    public PropertyUiSettings? PropertyUiSettings { get; set; }
    [Parameter]
    public string? Error { get; set; }
    [CascadingParameter]
    public EditParametersBearer EditParameterBearer { get; set; }
    private List<T>? RestorableValues;
    public void InternalUpdate(object x)
    {
        List<T> values = new();
        if (x is IEnumerable<string> identifiers)
        {
            foreach (var identify in identifiers)
            {
                var item = PropertyUiSettings?.Values?.FirstOrDefault(x => x.Id == identify)?.Value;
                if (item != null)
                    values.Add((T)item);
            }
        }
        Update(values);
        Values = values;
    }
    public async Task SetDefaultAsync()
    {
        T? entity = default(T);
        if (PropertyUiSettings!.Default != null)
            entity = PropertyUiSettings!.Default.Cast<T>();
        else
        {
            var entityRetrieved = await EditParameterBearer.EntityRetrieverByKey.Invoke(PropertyUiSettings.DefaultKey).NoContext();
            entity = PropertyUiSettings.ValueRetriever(entityRetrieved).Cast<T>();
        }
        List<T> values = new() { entity! };
        RestorableValues = values;
        Update(values);
        Values = values;
    }
    public void Restore()
    {
        Values = RestorableValues;
        RestorableValues = default;
        Update(Values!);
    }
}
