@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using System.Collections;
@using System.Text.Json;
@using System.Linq.Expressions;
@using RepositoryFramework.Web.Components.Services;
@typeparam T

@{
    var defaultClass = "col my-2";
    if (!PropertyUiSettings.HasValues() && PropertyUiSettings?.HasTextEditor == true)
    {
        defaultClass = "col-12 my-2";
    }
}
<div class="@defaultClass">
    <div class="input-group">
        <span class="input-group-text">
            @Name
        </span>
        @if (!PropertyUiSettings.HasValues())
        {
            @if (PropertyUiSettings?.HasTextEditor == true)
            {
                string style = $"height: {PropertyUiSettings.MinHeight}px;";

                <RadzenHtmlEditor Value="@Value?.ToString()"
                          ValueChanged="@((x) => InternalUpdate(x))"
                          class="form-control"
                          Style="@style"
                          Change=@OnChange
                          Paste=@OnPaste
                          Execute=@OnExecute
                          Disabled="@DisableEdit" />
            }
            else if (Value is bool booleanValue)
            {
                if (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    <RadzenCheckBox class="form-control" Value="@booleanValue" TriState=true TValue="bool?" Change=@(args => InternalUpdate(args)) Disabled="@DisableEdit" />
                }
                else
                {
                    <RadzenCheckBox class="form-control" Value="@booleanValue" TriState=false TValue="bool" Change=@(args => InternalUpdate(args)) Disabled="@DisableEdit" />
                }
            }
            else if (Value is DateTime dateTime)
            {
                <RadzenDatePicker class="form-control"
                          TValue="DateTime?"
                          ShowTime="true"
                          ShowSeconds="true"
                          HoursStep="1.5"
                          MinutesStep="5"
                          SecondsStep="10"
                          Value="Value"
                          Change=@(args => InternalUpdate(args))
                          DateFormat="yyyy/MM/dd HH:mm:ss"
                          Disabled="@DisableEdit" />
            }
            else if (Value is DateOnly dateOnly)
            {
                <RadzenDatePicker class="form-control"
                          TValue="DateOnly?"
                          Value="Value"
                          Change=@(args => InternalUpdate(args))
                          DateFormat="yyyy/MM/dd"
                          Disabled="@DisableEdit" />
            }
            else if (typeof(T).IsNumeric())
            {
                <RadzenNumeric class="form-control"
                       TValue="T"
                       Value="Value"
                       Placeholder="Enter or clear value"
                       Change="@(args => InternalUpdate(args))"
                       TextAlign="TextAlign.Right"
                       Disabled="@DisableEdit" />
            }
            else
            {
                <RadzenTextBox class="form-control" Value="@Value?.ToString()" Change=@(args => InternalUpdate(args)) Disabled="DisableEdit" />
            }
        }
        else
        {
            <RadzenDropDown TValue="string"
                        AllowClear="true"
                        AllowFiltering="true"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Multiple="false"
                        Placeholder="Select..."
                        Data="@PropertyUiSettings!.Values"
                        Value="@(PropertyUiSettings.LabelComparer(Value))"
                        TextProperty="Label"
                        ValueProperty="Id"
                        Change="@InternalProxyUpdate"
                        class="form-control"
                        Disabled="@DisableEdit" />
        }

        @if (PropertyUiSettings?.Default != null && !DisableEdit)
        {
            <span class="input-group-text">
                @if (RestorableValue == null)
                {
                    <RadzenButton Icon="star" Click="@((x) => SetDefault())" />
                }
                else
                {
                    <RadzenButton Icon="arrow_back" Click="@((x) => Restore())" />
                }
            </span>
        }
        <span class="input-group-text">
            <RadzenButton Click="@((x) => Copy.CopyAsync(Value?.ToString()))" Icon="file_copy" />
        </span>
        @if (!DisableEdit && Delete != null)
        {
            <span class="input-group-text">
                <RadzenButton Click="@((x) => Delete.Invoke())" Icon="delete" />
            </span>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Name { get; set; }
    [Parameter]
    public T? Value { get; set; }
    [Parameter]
    public Action<object> Update { get; set; }
    [Parameter]
    public bool DisableEdit { get; set; }
    [Parameter]
    public PropertyUiSettings? PropertyUiSettings { get; set; }
    [Inject]
    public ICopyService Copy { get; set; }
    [Parameter]
    public Action? Delete { get; set; }
    private T? RestorableValue;

    public void InternalUpdate(object? value)
    {
        var currentValue = value.Cast<T>()!;
        Update(currentValue);
        Value = currentValue;
    }
    public void InternalProxyUpdate(object x)
    {
        var id = x?.ToString();
        InternalUpdate(PropertyUiSettings!.Values!.FirstOrDefault(x => x.Id == id)?.Value);
    }
    public void SetDefault()
    {
        RestorableValue = Value;
        InternalUpdate(PropertyUiSettings!.Default);
    }
    public void Restore()
    {
        Value = RestorableValue;
        RestorableValue = default;
        InternalUpdate(Value);
    }
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        InternalUpdate(args.Html);
    }
    void OnChange(string html)
    {
        InternalUpdate(html);
    }
    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        var q = $"Execute: {args.CommandName}";
    }
}