@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@using System.Linq.Expressions;
@typeparam T


<Field ColumnSize="ColumnSize.IsHalf">
    <FieldBody>
        <Addons ColumnSize="ColumnSize.IsQuarter">
            <Addon AddonType="AddonType.Start">
                <AddonLabel>@Name</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                @if (Value is bool booleanValue)
                {
                    <Check TValue="bool" Checked="booleanValue" CheckedChanged="x => InternalUpdate(x)" Disabled="DisableEdit">
                        @Name
                    </Check>
                }
                else if (Value is DateTime dateTime)
                {
                    <DatePicker TValue="DateTime?" Date="dateTime" DateChanged="x => InternalUpdate(x)" Disabled="DisableEdit" />
                }
                else if (typeof(T).IsNumeric())
                {
                    <NumericEdit TValue="T" Value="Value" ValueChanged="x => InternalUpdate(x)" Disabled="DisableEdit"></NumericEdit>
                }
                else
                {
                    <TextEdit Text="@Value?.ToString()" TextChanged="x => InternalUpdate(x)" Disabled="DisableEdit">
                    </TextEdit>
                }
            </Addon>
        </Addons>
    </FieldBody>
</Field>


@code {
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public T? Value { get; set; }
    [Parameter]
    public Action<object> Update { get; set; }
    [Parameter]
    public bool DisableEdit { get; set; }
    
    public void InternalUpdate(object? value)
    {
        var currentValue = value.Cast<T>();
        Update(currentValue);
        Value = currentValue;
    }
}