@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise;
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@using System.Linq.Expressions;
@using Blazorise.Components;
@using Radzen
@using Radzen.Blazor
@typeparam T

@{
    var defaultClass = "col my-2";
    if (!PropertyUiSettings.HasValues() && PropertyUiSettings?.HasTextEditor == true)
    {
        defaultClass = "col-12 my-2";
    }
}
<div class="@defaultClass">
    <div class="input-group">
        <span class="input-group-text">
            @Name
        </span>
        @if (!PropertyUiSettings.HasValues())
        {
            @if (PropertyUiSettings?.HasTextEditor == true)
            {
                string style = $"height: {PropertyUiSettings.MinHeight}px;";

                <RadzenHtmlEditor Value="@Value?.ToString()"
                          ValueChanged="@((x) => InternalUpdate(x))"
                          class="form-control"
                          Style="@style"
                          Change=@OnChange
                          Paste=@OnPaste
                          Execute=@OnExecute />
            }
            else if (Value is bool booleanValue)
            {
                <div class="primitive-boolean">
                    <Switch TValue="bool" Checked="booleanValue" CheckedChanged="x => InternalUpdate(x)" Disabled="DisableEdit">
                    </Switch>
                </div>
            }
            else if (Value is DateTime dateTime)
            {
                <DatePicker TValue="DateTime?" Date="dateTime" DateChanged="x => InternalUpdate(x)" Disabled="DisableEdit" />
            }
            else if (Value is DateOnly dateOnly)
            {
                <DatePicker TValue="DateOnly?" Date="dateOnly" DateChanged="x => InternalUpdate(x)" Disabled="DisableEdit" />
            }
            else if (typeof(T).IsNumeric())
            {
                <NumericEdit TValue="T" Value="Value" ValueChanged="x => InternalUpdate(x)" Disabled="DisableEdit"></NumericEdit>
            }
            else
            {
                <TextEdit Text="@Value?.ToString()" TextChanged="x => InternalUpdate(x)" Disabled="DisableEdit">
                </TextEdit>
            }
        }
        else
        {
            <SelectList TValue="string"
                    TItem="string"
                    DefaultItemText="@Constant.None"
                    DefaultItemValue="@Constant.None"
                    Data="@PropertyUiSettings!.Values!.Select(x => x.Label)"
                    TextField="@(x => x)"
                    ValueField="@(x => x)"
                    SelectedValue="@PropertyUiSettings!.LabelComparer(Value)"
                    Multiple=false
                    Disabled="DisableEdit"
                    SelectedValueChanged="@InternalProxyUpdate">
            </SelectList>
        }

        @if (PropertyUiSettings?.Default != null && !DisableEdit)
        {
            <span class="input-group-text">
                @if (RestorableValue == null)
                {
                    <Blazorise.Bootstrap.Button Padding="Padding.Is0" Clicked="() => SetDefault()">
                        <Icon Name="IconName.Star" />
                    </Blazorise.Bootstrap.Button>
                }
                else
                {
                    <Blazorise.Bootstrap.Button Padding="Padding.Is0" Clicked="() => Restore()">
                        <Icon Name="IconName.ArrowLeft" />
                    </Blazorise.Bootstrap.Button>
                }
            </span>
        }
        <span class="input-group-text">
            <Copy ValueToCopy="() => Value?.ToString()"></Copy>
        </span>
    </div>
</div>

@code {
    [Parameter]
    public string? Name { get; set; }
    [Parameter]
    public T? Value { get; set; }
    [Parameter]
    public Action<object> Update { get; set; }
    [Parameter]
    public bool DisableEdit { get; set; }
    [Parameter]
    public PropertyUiSettings? PropertyUiSettings { get; set; }
    private T? RestorableValue;

    public void InternalUpdate(object? value)
    {
        var currentValue = value.Cast<T>()!;
        Update(currentValue);
        Value = currentValue;
    }
    public void InternalProxyUpdate(string label)
    {
        InternalUpdate(PropertyUiSettings!.Values!.FirstOrDefault(x => x.Label == label)?.Value);
    }
    public void SetDefault()
    {
        RestorableValue = Value;
        InternalUpdate(PropertyUiSettings!.Default);
    }
    public void Restore()
    {
        Value = RestorableValue;
        RestorableValue = default;
        InternalUpdate(Value);
    }
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        InternalUpdate(args.Html);
    }
    void OnChange(string html)
    {
        InternalUpdate(html);
    }
    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        var q = $"Execute: {args.CommandName}";
    }
}