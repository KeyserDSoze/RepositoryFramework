@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise;
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@using System.Linq.Expressions;
@using Blazorise.Components;
@typeparam T

<Field ColumnSize="ColumnSize.IsHalf.OnDesktop.IsFull.OnMobile">
    <FieldBody>
        <Addons ColumnSize="ColumnSize.IsQuarter">
            <Addon AddonType="AddonType.Start">
                <AddonLabel>@Name</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                @if (!PropertyRetrieved.HasValues())
                {
                    @if (Value is bool booleanValue)
                    {
                        <div class="primitive-boolean">
                            <Switch TValue="bool" Checked="booleanValue" CheckedChanged="x => InternalUpdate(x)" Disabled="DisableEdit">
                            </Switch>
                        </div>
                    }
                    else if (Value is DateTime dateTime)
                    {
                        <DatePicker TValue="DateTime?" Date="dateTime" DateChanged="x => InternalUpdate(x)" Disabled="DisableEdit" />
                    }
                    else if (Value is DateOnly dateOnly)
                    {
                        <DatePicker TValue="DateOnly?" Date="dateOnly" DateChanged="x => InternalUpdate(x)" Disabled="DisableEdit" />
                    }
                    else if (typeof(T).IsNumeric())
                    {
                        <NumericEdit TValue="T" Value="Value" ValueChanged="x => InternalUpdate(x)" Disabled="DisableEdit"></NumericEdit>
                    }
                    else
                    {
                        <TextEdit Text="@Value?.ToString()" TextChanged="x => InternalUpdate(x)" Disabled="DisableEdit">
                        </TextEdit>
                    }
                }
                else
                {
                    <SelectList TValue="string"
                            TItem="string"
                            DefaultItemText="@Constant.None"
                            DefaultItemValue="@Constant.None"
                            Data="@PropertyRetrieved!.Values!.Select(x => x.Label)"
                            TextField="@(x => x)"
                            ValueField="@(x => x)"
                            SelectedValue="@PropertyRetrieved!.LabelComparer(Value)"
                            Multiple=false
                            Disabled="DisableEdit"
                            SelectedValueChanged="@InternalProxyUpdate">
                    </SelectList>
                }
            </Addon>
            @if (PropertyRetrieved?.Default != null && !DisableEdit)
            {
                <Addon AddonType="AddonType.End">
                    <AddonLabel>
                        @if (RestorableValue == null)
                        {
                            <Blazorise.Bootstrap.Button Padding="Padding.Is0" Clicked="() => SetDefault()">
                                Set default
                            </Blazorise.Bootstrap.Button>
                        }
                        else
                        {
                            <Blazorise.Bootstrap.Button Padding="Padding.Is0" Clicked="() => Restore()">
                                Restore
                            </Blazorise.Bootstrap.Button>
                        }
                    </AddonLabel>
                </Addon>
            }
        </Addons>
    </FieldBody>
</Field>


@code {
    [Parameter]
    public string? Name { get; set; }
    [Parameter]
    public T? Value { get; set; }
    [Parameter]
    public Action<object> Update { get; set; }
    [Parameter]
    public bool DisableEdit { get; set; }
    [Parameter]
    public RepositoryUiPropertyValueRetrieved? PropertyRetrieved { get; set; }
    private T? RestorableValue;

    public void InternalUpdate(object? value)
    {
        var currentValue = value.Cast<T>();
        Update(currentValue);
        Value = currentValue;
    }
    public void InternalProxyUpdate(string label)
    {
        InternalUpdate(PropertyRetrieved!.Values!.FirstOrDefault(x => x.Label == label)?.Value);
    }
    public void SetDefault()
    {
        RestorableValue = Value;
        InternalUpdate(PropertyRetrieved!.Default);
    }
    public void Restore()
    {
        Value = RestorableValue;
        RestorableValue = default;
        InternalUpdate(Value);
    }
}