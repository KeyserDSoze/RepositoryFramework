@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using System.Collections;
@using System.Text.Json;
@using System.Linq.Expressions;
@using RepositoryFramework.Web.Components.Services;

@{
    var defaultClass = "col my-2";
    if (!_propertyUiSettings.HasValues() && _propertyUiSettings?.HasTextEditor == true)
    {
        defaultClass = "col-12 my-2";
    }
}
<div class="@defaultClass">
    <div class="input-group">
        <span class="input-group-text">
            @(OverriddenName ?? BaseProperty.Self.Name)
        </span>
        @if (!_propertyUiSettings.HasValues())
        {
            @if (_propertyUiSettings?.HasTextEditor == true)
            {
                string style = $"height: {_propertyUiSettings.MinHeight}px;";

                <RadzenHtmlEditor Value="@_value?.ToString()"
                          ValueChanged="@((x) => InternalUpdate(x))"
                          class="form-control"
                          Style="@style"
                          Change=@OnChange
                          Paste=@OnPaste
                          Disabled="@_disableEdit" />
            }
            else if (_value is bool booleanValue)
            {
                if (_value.GetType().IsGenericType)
                {
                    <RadzenCheckBox class="form-control" Value="@booleanValue" TriState=true TValue="bool?" Change=@(args => InternalUpdate(args)) Disabled="@_disableEdit" />
                }
                else
                {
                    <RadzenCheckBox class="form-control" Value="@booleanValue" TriState=false TValue="bool" Change=@(args => InternalUpdate(args)) Disabled="@_disableEdit" />
                }
            }
            else if (_value is DateTime dateTime)
            {
                <RadzenDatePicker class="form-control"
                          TValue="DateTime?"
                          ShowTime="true"
                          ShowSeconds="true"
                          HoursStep="1.5"
                          MinutesStep="5"
                          SecondsStep="10"
                          Value="_value"
                          Change=@(args => InternalUpdate(args))
                          DateFormat="yyyy/MM/dd HH:mm:ss"
                          Disabled="@_disableEdit" />
            }
            else if (_value is DateOnly dateOnly)
            {
                <RadzenDatePicker class="form-control"
                          TValue="DateOnly?"
                          Value="_value"
                          Change=@(args => InternalUpdate(args))
                          DateFormat="yyyy/MM/dd"
                          Disabled="@_disableEdit" />
            }
            else
            {
                <RadzenTextBox class="form-control" Value="@_value?.ToString()" Change=@(args => InternalUpdate(args)) Disabled="_disableEdit" />
            }
        }
        else
        {
            <RadzenDropDown TValue="string"
                        AllowClear="true"
                        AllowFiltering="true"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Multiple="@_isMultiple"
                        Placeholder="Select..."
                        Data="@_propertyUiSettings!.Values"
                        Value="@LabelComparer()"
                        TextProperty="Label"
                        ValueProperty="Id"
                        Change="@InternalProxyUpdate"
                        class="form-control"
                        Disabled="@_disableEdit" />
        }
        <DefaultButton Class="input-group-text"
                       WithIcon=true
                       Update="@InternalUpdate"
                       PropertyUiSettings="@_propertyUiSettings"
                       Value="Value" />
        <span class="input-group-text">
            <RadzenButton Click="@((x) => Copy.CopyAsync(_value?.ToString()))" Icon="file_copy" />
        </span>
        @if (!_disableEdit && Index != null)
        {
            <span class="input-group-text">
                <RadzenButton Click="@((x) => RemoveFromEnumerable())" Icon="delete" />
            </span>
        }
        <ErrorCatcher Error="@_error" />
    </div>
</div>

@code {
    [CascadingParameter]
    public EditParametersBearer EditParametersBearer { get; set; }
    [Parameter]
    public BaseProperty BaseProperty { get; set; }
    [Parameter]
    public int? Index { get; set; }
    [Parameter]
    public string? OverriddenName { get; set; }
    [Inject]
    public ICopyService Copy { get; set; }
    private PropertyUiSettings? _propertyUiSettings;
    private object? _value;
    private string? _error;
    private bool _disableEdit = true;
    private bool _isMultiple = false;
    protected override void OnParametersSet()
    {
        var value = EditParametersBearer.GetValue(BaseProperty);
        if (value.Exception == null)
        {
            var entity = value.Entity;
            if (Index != null && _value is IEnumerable entities)
            {
                _value = entities.ElementAt(Index.Value);
            }
            else
                _value = entity;
            _isMultiple = _value is not string && _value is IEnumerable;
            _propertyUiSettings = EditParametersBearer.GetSettings(BaseProperty);
            _disableEdit = !EditParametersBearer.CanEdit(BaseProperty);
        }
        else
            _error = value.Exception.Message;
        base.OnParametersSet();
    }
    public void InternalUpdate(object? value)
    {
        EditParametersBearer.SetValue(BaseProperty, value);
        _value = value;
    }
    public void InternalProxyUpdate(object x)
    {
        var id = x?.ToString();
        InternalUpdate(_propertyUiSettings!.Values!.FirstOrDefault(x => x.Id == id)?.Value);
    }
    private void RemoveFromEnumerable()
    {
        var result = EditParametersBearer.GetValue(BaseProperty);
        if (result.Exception == null)
        {
            if (result.Entity is Array array)
            {
            }
        }
    }
    private object LabelComparer()
    {
        if (_isMultiple && _value is IEnumerable enumerable)
            return GetLabels();
        else
            return _propertyUiSettings.LabelComparer(_value);
    }
    private IEnumerable<string> GetLabels()
    {
        foreach (var item in _value as IEnumerable)
            yield return _propertyUiSettings.LabelComparer(item);
    }
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        InternalUpdate(args.Html);
    }
    void OnChange(string html)
    {
        InternalUpdate(html);
    }
}