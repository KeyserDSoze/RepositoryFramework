@namespace RepositoryFramework.Web.Components.Standard
@using System.Reflection;
@using Blazorise
@using System.Collections;
@using System.Text.Json;
@using Blazorise.DataGrid
@using System.Linq.Expressions;

@if (PropertyInfoKeeper != null)
{
    var value = PropertyInfoKeeper.Value(Context);
    <Field ColumnSize="ColumnSize.IsHalf">
        <FieldLabel>@PropertyInfoKeeper.Name</FieldLabel>
        <FieldBody>
            @if (value is bool booleanValue)
            {
                <Check TValue="bool" Checked="booleanValue" CheckedChanged="x => Update(x)">
                    @PropertyInfoKeeper.Name
                </Check>
            }
            else if (value is DateTime dateTime)
            {
                <DatePicker TValue="DateTime?" Date="dateTime" DateChanged="x => Update(x)" />
            }
           @* else if (value.IsNumeric())
            {
                @LoadNumeric(value)
            }*@
            else
            {
                <TextEdit Text="@value?.ToString()" TextChanged="x => Update(x)">
                </TextEdit>
            }
        </FieldBody>
    </Field>
}

@code {
    [Parameter]
    public PropertyInfoKeeper PropertyInfoKeeper { get; set; }
    [Parameter]
    public object Context { get; set; }
    public void Update(object? value)
    {
        PropertyInfoKeeper.Set(Context, value);
    }
  
    //private protected RenderFragment LoadNumeric(object? value)
    //{
    //    Expression<Action<int>> A = x => Update((object)x);
    //    var qq = A.Serialize();
    //    var genericLambda = (qq).DeserializeAsDynamic(PropertyInfoKeeper.PropertyInfo.PropertyType);
    //    var frag = new RenderFragment(b =>
    //    {
    //        b.OpenComponent(1, genericType);
    //        b.AddAttribute(2, "Value", value);
    //        b.AddAttribute(3, "ValueChanged", genericLambda);
    //        b.AddAttribute(4, "ModifyValueOnWheel", true);
    //        b.AddAttribute(5, "WheelOn", NumericWheelOn.Hover);
    //        b.CloseComponent();
    //    });
    //    return frag;
    //}
}