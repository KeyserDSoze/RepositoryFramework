@namespace RepositoryFramework.Web.Components.Standard
@using Radzen;
@using Radzen.Blazor
@using System.Text;
@using System.Numerics;
@using System.Reflection;

@if (SearchValue != null)
{
    if (!PropertyUiSettings.HasValues())
    {
        if (SearchValue.BaseProperty.AssemblyType == typeof(bool) || SearchValue.BaseProperty.AssemblyType == typeof(bool?))
        {
            <Labeller Class="w-100">
                <Body>
                    <RadzenCheckBox class="form-control" Value="_booleanValue" TriState=true TValue="bool?" Change=@(args => BoolSearch(args, SearchValue.BaseProperty.AssemblyType == typeof(bool?))) />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => BoolSearch(null, false))" />
                </First>
            </Labeller>
        }
        else if (SearchValue.BaseProperty.AssemblyType == typeof(DateTime) || SearchValue.BaseProperty.AssemblyType == typeof(DateTime?))
        {
            <Labeller Class="w-100" Text="@FromLabel">
                <Body>
                    <RadzenDatePicker class="form-control"
                          TValue="DateTime?"
                          Value="_dateTime.Start"
                          Change=@(args => DateTimeSearch(args, true))
                          DateFormat="yyyy/MM/dd" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => DateTimeSearch(null, true))" />
                </First>
            </Labeller>
            <Labeller Class="w-100 mt-1" Text="@ToLabel">
                <Body>
                    <RadzenDatePicker class="form-control"
                          TValue="DateTime?"
                          Value="_dateTime.End"
                          Change=@(args => DateTimeSearch(args, false))
                          DateFormat="yyyy/MM/dd" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => DateTimeSearch(null, false))" />
                </First>
            </Labeller>
        }
        else if (SearchValue.BaseProperty.AssemblyType == typeof(DateOnly) || SearchValue.BaseProperty.AssemblyType == typeof(DateOnly?))
        {
            <Labeller Class="w-100" Text="@FromLabel">
                <Body>
                    <RadzenDatePicker class="form-control"
                          TValue="DateOnly?"
                          Value="_date.Start"
                          Change=@(args => DateSearch(args, true))
                          DateFormat="yyyy/MM/dd" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => DateSearch(null, true))" />
                </First>
            </Labeller>
            <Labeller Class="w-100 mt-1" Text="@ToLabel">
                <Body>
                    <RadzenDatePicker class="form-control"
                          TValue="DateOnly?"
                          Value="_date.End"
                          Change=@(args => DateSearch(args, false))
                          DateFormat="yyyy/MM/dd" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => DateSearch(null, false))" />
                </First>
            </Labeller>
        }
        else if (SearchValue.BaseProperty.AssemblyType.IsNumeric())
        {
            <Labeller Class="w-100" Text="@FromLabel">
                <Body>
                    <RadzenNumeric class="form-control"
                       TValue="decimal?"
                       Value="_number.Start"
                       Placeholder="Enter or clear value"
                       Change="@(args => NumberSearch(args, true))"
                       TextAlign="TextAlign.Right" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => NumberSearch(null, true))" />
                </First>
            </Labeller>
            <Labeller Class="w-100 mt-1" Text="@ToLabel">
                <Body>
                    <RadzenNumeric class="form-control"
                       TValue="decimal?"
                       Value="_number.End"
                       Placeholder="Enter or clear value"
                       Change="@(args => NumberSearch(args, false))"
                       TextAlign="TextAlign.Right" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => NumberSearch(null, false))" />
                </First>
            </Labeller>
        }
        else
        {
            <Labeller Class="w-100">
                <Body>
                    <RadzenTextBox class="form-control" Value="@_stringValue" Change="@(args => Contains(args?.ToString()))" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => Contains(null))" />
                </First>
            </Labeller>
        }
    }
    else
    {
        <Labeller Class="w-100">
            <Body>
                <select class="form-control" multiple @onchange="MultipleChoices">
                    @foreach (var option in PropertyUiSettings.Values)
                    {
                        <option value="@option.Id" selected="@(_optionKeys?.Contains(option.Id) == true)">@option.Label</option>
                    }
                </select>
            </Body>
            <First>
                <RadzenButton Icon="close" Click="@((x) => MultipleChoices(null))" />
            </First>
        </Labeller>

    }
}