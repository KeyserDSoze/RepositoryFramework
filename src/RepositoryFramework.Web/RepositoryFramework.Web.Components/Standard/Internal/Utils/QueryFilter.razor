@namespace RepositoryFramework.Web.Components.Standard
@using Radzen;
@using Radzen.Blazor
@using System.Text;
@using System.Numerics;
@using System.Reflection;

@if (SearchValue != null)
{
    if (!PropertyUiSettings.HasValues())
    {
        if (SearchValue.BaseProperty.AssemblyType == typeof(bool) || SearchValue.BaseProperty.AssemblyType == typeof(bool?))
        {
            <div class="w-100">
                <div class="input-group">
                    <span class="input-group-text">
                        Check:
                    </span>
                </div>
                <RadzenCheckBox class="form-control" Value="_booleanValue" TriState=true TValue="bool?" Change=@(args => BoolSearch()) />
            </div>
        }
        else if (SearchValue.BaseProperty.AssemblyType == typeof(DateTime) || SearchValue.BaseProperty.AssemblyType == typeof(DateTime?))
        {
            <Labeller Class="w-100" Text="from">
                <Body>
                    <RadzenDatePicker class="form-control"
                          TValue="DateTime?"
                          ShowTime="true"
                          ShowSeconds="true"
                          HoursStep="1.5"
                          MinutesStep="5"
                          SecondsStep="10"
                          Value="_dateTime.Start"
                          Change=@(args => DateTimeSearch())
                          DateFormat="yyyy/MM/dd HH:mm:ss" />
                </Body>
            </Labeller>

            <div class="w-100">
                <div class="input-group">
                    <span class="input-group-text">
                        To:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </span>
                </div>
                <RadzenDatePicker class="form-control"
                      TValue="DateTime?"
                      ShowTime="true"
                      ShowSeconds="true"
                      HoursStep="1.5"
                      MinutesStep="5"
                      SecondsStep="10"
                      Value="_dateTime.End"
                      Change=@(args => DateTimeSearch())
                      DateFormat="yyyy/MM/dd HH:mm:ss" />
            </div>
        }
        else if (SearchValue.BaseProperty.AssemblyType == typeof(DateOnly) || SearchValue.BaseProperty.AssemblyType == typeof(DateOnly?))
        {
            <div class="w-100">
                <div class="input-group">
                    <span class="input-group-text">
                        From:
                    </span>
                </div>
                <RadzenDatePicker class="form-control"
                      TValue="DateOnly?"
                      Value="_date.Start"
                      Change=@(args => DateSearch())
                      DateFormat="yyyy/MM/dd" />
            </div>
            <div class="w-100">
                <div class="input-group">
                    <span class="input-group-text">
                        To:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </span>
                </div>
                <RadzenDatePicker class="form-control"
                      TValue="DateOnly?"
                      Value="_date.End"
                      Change=@(args => DateSearch())
                      DateFormat="yyyy/MM/dd" />
            </div>
        }
        else if (SearchValue.BaseProperty.AssemblyType.IsNumeric())
        {
            <div class="w-100">
                <div class="input-group">
                    <span class="input-group-text">
                        From:
                    </span>
                    <RadzenNumeric class="form-control"
                       TValue="decimal?"
                       Value="_number.Start"
                       Placeholder="Enter or clear value"
                       Change="@(args => NumberSearch((decimal)args, true))"
                       TextAlign="TextAlign.Right" />
                </div>
            </div>
            <div class="w-100 mt-1">
                <div class="input-group">
                    <span class="input-group-text">
                        To:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </span>
                    <RadzenNumeric class="form-control"
                       TValue="decimal?"
                       Value="_number.End"
                       Placeholder="Enter or clear value"
                       Change="@(args => NumberSearch((decimal)args, false))"
                       TextAlign="TextAlign.Right" />
                </div>
            </div>
        }
        else
        {
            <Labeller Class="w-100">
                <Body>
                    <RadzenTextBox class="form-control" Value="@_stringValue" Change="@(args => Contains(args?.ToString()))" />
                </Body>
                <First>
                    <RadzenButton Icon="close" Click="@((x) => Contains(null))" />
                </First>
            </Labeller>
        }
    }
    else
    {
        <RadzenDropDown TValue="IEnumerable<string>"
                AllowClear="true"
                AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                Multiple="true"
                Placeholder="Select..."
                Data="@PropertyUiSettings!.Values"
                Value="@_optionKeys"
                TextProperty="Label"
                ValueProperty="Id"
                Change="@MultipleChoices"
                class="form-control" />
    }
}