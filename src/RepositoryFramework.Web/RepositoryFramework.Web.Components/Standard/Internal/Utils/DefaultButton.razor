@namespace RepositoryFramework.Web.Components.Standard
@using Radzen;
@using Radzen.Blazor

@if (_value != null)
{
    if (WithIcon)
    {
        <span class="@Class">
            @if (!EditParametersBearer.RestorableValues.ContainsKey(BaseProperty.NavigationPath))
            {
                <RadzenButton Click=@(args => SetDefaultAsync()) Icon="star" ButtonStyle="ButtonStyle.Primary" />
            }
            else
            {
                <RadzenButton Click=@(args => Restore()) Icon="arrow_back" ButtonStyle="ButtonStyle.Warning" />
            }
        </span>
    }
    else
    {
        <div class="@Class">
            @if (!EditParametersBearer.RestorableValues.ContainsKey(BaseProperty.NavigationPath))
            {
                <RadzenButton Click=@(args => SetDefaultAsync()) Text="Set default" ButtonStyle="ButtonStyle.Primary" />
            }
            else
            {
                <RadzenButton Click=@(args => Restore()) Text="Restore" ButtonStyle="ButtonStyle.Warning" />
            }
        </div>
    }
}

@code {
    [CascadingParameter(Name = Constant.EditParametersBearer)]
    public EditParametersBearer EditParametersBearer { get; set; }
    [Parameter]
    public BaseProperty BaseProperty { get; set; }
    [Parameter]
    public int[]? Indexes { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public bool WithIcon { get; set; }
    [Parameter]
    public bool ForceNotEditable { get; set; }
    private PropertyUiSettings? _propertyUiSettings;
    public bool _disableEdit { get; set; }
    private object? _value;
    private object? _restorableValue;
    protected override void OnParametersSet()
    {
        if (EditParametersBearer != null && _propertyUiSettings?.HasDefault == true && !_disableEdit)
        {
            _propertyUiSettings = EditParametersBearer.GetSettings(BaseProperty);
            _disableEdit = ForceNotEditable || !EditParametersBearer.CanEdit(BaseProperty);
            _value = EditParametersBearer.GetValue(BaseProperty, Indexes);
        }
        base.OnParametersSet();
    }
    public async Task SetDefaultAsync()
    {
        object? entity;
        if (_propertyUiSettings!.Default != null)
            entity = _propertyUiSettings!.Default;
        else
        {
            var entityRetrieved = await EditParametersBearer.EntityRetrieverByKey.Invoke(_propertyUiSettings.DefaultKey).NoContext();
            entity = _propertyUiSettings.ValueRetriever(entityRetrieved);
        }
        _restorableValue = _value;
        EditParametersBearer.SetValue(BaseProperty, entity);
        _value = entity;
    }
    public void Restore()
    {
        _value = _restorableValue;
        EditParametersBearer.SetValue(BaseProperty, _restorableValue);
        _restorableValue = null;
    }
}

