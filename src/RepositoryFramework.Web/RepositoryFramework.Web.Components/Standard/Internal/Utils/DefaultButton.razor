@namespace RepositoryFramework.Web.Components.Standard
@using Radzen;
@using Radzen.Blazor

@if (EditParameterBearer != null && _propertyUiSettings?.HasDefault == true && !DisableEdit)
{
    if (WithIcon)
    {
        <span class="@Class">
            @if (!EditParameterBearer.RestorableValues.ContainsKey(BaseProperty.NavigationPath))
            {
                <RadzenButton Click=@(args => SetDefaultAsync()) Icon="star" ButtonStyle="ButtonStyle.Primary" />
            }
            else
            {
                <RadzenButton Click=@(args => Restore()) Icon="arrow_back" ButtonStyle="ButtonStyle.Warning" />
            }
        </span>
    }
    else
    {
        <div class="@Class">
            @if (!EditParameterBearer.RestorableValues.ContainsKey(BaseProperty.NavigationPath))
            {
                <RadzenButton Click=@(args => SetDefaultAsync()) Text="Set default" ButtonStyle="ButtonStyle.Primary" />
            }
            else
            {
                <RadzenButton Click=@(args => Restore()) Text="Restore" ButtonStyle="ButtonStyle.Warning" />
            }
        </div>
    }
}

@code {
    [CascadingParameter]
    public EditParametersBearer EditParameterBearer { get; set; }
    [Parameter]
    public BaseProperty BaseProperty { get; set; }
    [Parameter]
    public Action<object?> Update { get; set; }
    [Parameter]
    public bool DisableEdit { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public bool WithIcon { get; set; }
    private PropertyUiSettings? _propertyUiSettings;
    private object? _value;
    private object? _restorableValue;
    protected override void OnParametersSet()
    {
        _propertyUiSettings = EditParameterBearer.GetSettings(BaseProperty);
        _value = BaseProperty.Value(EditParameterBearer.BaseEntity);
        base.OnParametersSet();
    }
    public async Task SetDefaultAsync()
    {
        object? entity;
        if (_propertyUiSettings!.Default != null)
            entity = _propertyUiSettings!.Default;
        else
        {
            var entityRetrieved = await EditParameterBearer.EntityRetrieverByKey.Invoke(_propertyUiSettings.DefaultKey).NoContext();
            entity = _propertyUiSettings.ValueRetriever(entityRetrieved);
        }
        _restorableValue = _value;
        Update(entity);
        _value = entity;
    }
    public void Restore()
    {
        _value = _restorableValue;
        Update(_restorableValue);
        _restorableValue = null;
    }
}

